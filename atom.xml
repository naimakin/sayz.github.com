<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Sayz'ın Usu]]></title>
  <link href="http://sayz.github.io/atom.xml" rel="self"/>
  <link href="http://sayz.github.io/"/>
  <updated>2013-04-30T01:44:24+03:00</updated>
  <id>http://sayz.github.io/</id>
  <author>
    <name><![CDATA[Sefa Yıldız]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[python modüllerinde __name__ Özelliğinin kullanımı]]></title>
    <link href="http://sayz.github.io/blog/2013/04/29/python-modullerinde-name-kullanimi/"/>
    <updated>2013-04-29T22:45:00+03:00</updated>
    <id>http://sayz.github.io/blog/2013/04/29/python-modullerinde-name-kullanimi</id>
    <content type="html"><![CDATA[<h4>Modüller yenilir mi, içilir mi?</h4>

<p>Öncelikle python&#8217;da modüllerden ufak bi&#8217; bahsedeyim. Bildiğiniz gibi <strong>bir betik içersinde</strong> kodlarımızı tekrar tekrar yazmamak için bir kez fonksiyon tanımlamamız yeterli. O fonksiyonu kullanarak kodları tekrar kullanabiliyoruz. Peki ya aynı fonksiyona başka bir Python programında da ihtiyacımız olursa ne yapacağız? Cevap tabii ki modül kullanmak.</p>

<p>Python&#8217;da modül yazmak için birçok metod var ama bunlardan en basit ve en yaygın olanı fonksiyonlar ve değişkenler için .py uzantılı dosyaları kullanmak. Yani <strong>evet</strong>, şimdiye kadar yazdığınız her python betiği aynı zamanda birer modül. Diğer bir modül oluşturma yöntemi de <a href="http://docs.python.org/3/extending/index.html">C veya C++ programlama dilleri ile yazmaktır</a>.</p>

<p>Yani sonuç olarak python&#8217;da modül dediğimiz şey aslında bizim yazdığımız betiklerdir. Yani yazdığımız her python betiği bir modül olarak başka bir betikte içe aktarılabilir(<code>import</code>).  Modüller için ayrıca <a href="http://docs.python.org/3/tutorial/modules.html">buraya</a> bakabilirsiniz.</p>

<h4>Bir modül&#8217;ün ismi</h4>

<p>Yavaş yavaş asıl değinmek istediğim konuya geleyim. Python&#8217;da her modülün bir ismi vardır. Python yorumlayıcısı bir modülü yorumlarken o modüldeki tüm kodları çalıştırmadan önce  bazı değişkenler tanımlar. Bunlardan birisi <code>__name__</code> değişkenidir. Bu değişken, o modül&#8217;ün çalıştırılma şekline göre başka değerler alır.</p>

<!-- more -->


<p>Eğer python yorumlayıcısı bizim yazdığımız modülü ana program olarak çalıştırıyorsa <code>__name__</code> değişkeni <code>'__main__'</code> değerini alır. Ancak yazmış olduğumuz modül başka bir modül içinden çağırılıyorsa bu sefer <code>__name__</code> değişkeni kendi modül&#8217;ünün adını alır.</p>

<p>Anlaşılması için bunları bir örnekle açıklayayım;</p>

<p>Örneğin <code>ornek_modul.py</code> isminde bir dosyaya kaydedeceğimiz şöyle bir betik yazalım:</p>

<figure class='code'><figcaption><span>__name__ özelliğinin kullanımı</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&#39;Kendi dosyam tarafından çalıştırıldım.&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&#39;Başka bir modül tarafından içe aktarılarak çalıştırıldım.&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Şimdi bu betikle ilgili çıktılara bakalım:</p>

<figure class='code'><figcaption><span>çıktı testleri</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>python3 ornek_modul.py
</span><span class='line'>Kendi dosyam tarafından çalıştırıldım.
</span><span class='line'><span class="nv">$ </span>python3
</span><span class='line'>&gt;&gt;&gt; import ornek_modul
</span><span class='line'>Başka bir modül tarafından içe aktarılarak çalıştırıldım.
</span><span class='line'>&gt;&gt;&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Görüldüğü gibi <code>ornek_modul.py</code> doyasını kendi başına çalıştırısak <code>__name__</code> değişkeni <code>'__main__'</code> değerini alıyor. Fakat python&#8217;un etkileşimli kabuğuna girip <code>ornek_modul</code> modülünü içeri aktarırsak 1. koddaki <code>else</code> bloğuna düşeriz çünkü <code>__name__</code> değişkeni bu defa modülün ismi olan <code>ornek_modul</code> değerini almış olur.</p>

<p>kaynaklar:</p>

<ul>
<li><a href="http://swaroopch.com/notes/python/">a byte of python</a></li>
<li><a href="http://stackoverflow.com/questions/419163/what-does-if-name-main-do">stackoverflow</a></li>
<li><a href="http://docs.python.org/">python docs</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[otomatik pep8'leyici: autopep8]]></title>
    <link href="http://sayz.github.io/blog/2013/04/07/otomatik-pep8-leyici-autopep8/"/>
    <updated>2013-04-07T21:45:00+03:00</updated>
    <id>http://sayz.github.io/blog/2013/04/07/otomatik-pep8-leyici-autopep8</id>
    <content type="html"><![CDATA[<p>herkese merhabalar;</p>

<p>autopep8 için bölüm&#8217;ün e-posta listesine attığım e-postayı buraya da geçeyim.$</p>

<p>bildiğiniz gibi python için bir kod yazım stili var: pep8 (bilmeyenler için<sup>(<a href="http://www.python.org/dev/peps/pep-0008/">1</a>)</sup>), neyse, işte python ile yeni kod yazmaya başlayan arkadaşlar genellikle bu kurallara, stile uymakta zorlanır veya erinirler bunları uygulamaya, ne bileyim işleçler arasında boşluk bırakmak falan zor gelir kimisine.</p>

<p>biliyorsunuz genelde tembel insanlarız bizler :-) o yüzden adamlar sırf bu bizim eringeçliğimizi bildikleri için erinmemişler :-) ve kalkıp bir otomatik &#8220;pep8&#8221;leyici (tabir bana ait) yazmışlar, adı autopep8.</p>

<h5>peki nedir bu autopep8, yenilir mi içilir mi?</h5>

<p>kısaca şudur:</p>

<p>sen karman çorman yazıyorsun kodu<sup>(<a href="http://goo.gl/BYUeu">2</a>)</sup> ve autopep8 sadece tek satırlık komutla kodunu pep8&#8217;e uygun hale<sup>(<a href="http://goo.gl/C5LqP">3</a>)</sup> getiriyor.</p>

<ul>
<li>önce autopep8&#8217;i kuralım sistemimize:</li>
</ul>


<p> ~$: <code>sudo easy_install -ZU autopep8</code></p>

<ul>
<li>kurulumdan sonra şöyle kullanabilirsiniz autopep8&#8217;i:</li>
</ul>


<p>  ~$: <code>autopep8 -ia bozuk_kod.py</code></p>

<p>  artık kodunuz pep8 standartlarına uygun hale gelmiş oldu.</p>

<p>  iki dosya arasındaki farkı görmek için <a href="https://gist.github.com/sayz/5331516/revisions">şuradaki</a> gist karşılaştırmasına bakabilirsiniz.</p>

<p>  autopep8&#8217;e sokmadan önce bozuk_kod.py doyasının pep8 çıktısı 144 satırdı.<sup>(<a href="http://goo.gl/1Gcmh">4</a>)</sup></p>

<p>  daha fazlası <a href="https://github.com/hhatto/autopep8">burada</a>.</p>

<p>  \HTH</p>

<p>  &#8211;
  sayz</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cinnamon settings'de python hatası]]></title>
    <link href="http://sayz.github.io/blog/2013/04/03/cinnamon-settingsde-python-hatasi/"/>
    <updated>2013-04-03T16:16:00+03:00</updated>
    <id>http://sayz.github.io/blog/2013/04/03/cinnamon-settingsde-python-hatasi</id>
    <content type="html"><![CDATA[<p>masaüstü sistem olarak linux mint cinnamon 14 kullanıyorum geçenlerde cinnamon&#8217;un ayarlarını açmaya çalıştığımda açılmadı konsola yazdığımda şöyle bir hata alıyorum:</p>

<pre><code>sayz@caravasar$  cinnamon-settings 
/usr/lib/python2.7/dist-packages/gobject/constants.py:24: Warning: g_boxed_type_register_static    : assertion `g_type_from_name (name) == 0' failed
import gobject._gobject

&gt;&gt;&gt;
</code></pre>

<p>hata cinnamon&#8217;dan değil python&#8217;dan kaynaklanıyor belli ki ama daha çözüme ulaşamadım ulaşınca buraya da geçeceğim. <a href="http://goo.gl/CtZUv">launchpad</a>&#8216;de de hata kaydı açılmış bunula ilgili.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[merhaba octopress]]></title>
    <link href="http://sayz.github.io/blog/2013/03/29/merhaba-octopress/"/>
    <updated>2013-03-29T03:01:00+02:00</updated>
    <id>http://sayz.github.io/blog/2013/03/29/merhaba-octopress</id>
    <content type="html"><![CDATA[<p>Merhaba Octopress</p>

<p>Gist denemesi, FizzBuzz kodu:</p>

<div><script src='https://gist.github.com/5268035.js'></script>
<noscript><pre><code></code></pre></noscript></div>


<p>Kod blokları denemesi</p>

<figure class='code'><figcaption><span>Javascript Array Syntax </span><a href='http://j.mp/pPUUmW'>MDN Documentation </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">arr1</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">arrayLength</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">element0</span><span class="p">,</span> <span class="nx">element1</span><span class="p">,</span> <span class="p">...,</span> <span class="nx">elementN</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>kod blokları denemesi 2</p>

<figure class='code'><figcaption><span>liste analizi  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd">Created on 22 Nis 2011</span>
</span><span class='line'>
</span><span class='line'><span class="sd">@author: sayz</span>
</span><span class='line'><span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">analiz</span><span class="p">(</span><span class="n">liste</span><span class="p">):</span>
</span><span class='line'>  <span class="n">ks</span><span class="p">,</span> <span class="n">ts</span><span class="p">,</span> <span class="n">os</span><span class="p">,</span> <span class="n">bs</span><span class="p">,</span> <span class="n">ls</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">it</span> <span class="ow">in</span> <span class="n">liste</span><span class="p">:</span>
</span><span class='line'>      <span class="k">if</span> <span class="nb">type</span><span class="p">(</span><span class="n">it</span><span class="p">)</span> <span class="o">==</span> <span class="nb">int</span><span class="p">:</span>
</span><span class='line'>          <span class="n">ts</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">elif</span> <span class="nb">type</span><span class="p">(</span><span class="n">it</span><span class="p">)</span> <span class="o">==</span> <span class="nb">float</span><span class="p">:</span>
</span><span class='line'>          <span class="n">os</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">elif</span> <span class="nb">type</span><span class="p">(</span><span class="n">it</span><span class="p">)</span> <span class="o">==</span> <span class="nb">bool</span><span class="p">:</span>
</span><span class='line'>          <span class="n">bs</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">elif</span> <span class="nb">type</span><span class="p">(</span><span class="n">it</span><span class="p">)</span> <span class="o">==</span> <span class="nb">str</span><span class="p">:</span>
</span><span class='line'>          <span class="n">ks</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">else</span><span class="p">:</span>
</span><span class='line'>          <span class="n">ls</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;karakter:</span><span class="si">%d</span><span class="se">\n</span><span class="s">tamsayı: </span><span class="si">%d</span><span class="se">\n</span><span class="s">ondaliksayı: </span><span class="si">%d</span><span class="se">\n</span><span class="s"> </span><span class="se">\</span>
</span><span class='line'><span class="s">  bool: </span><span class="si">%d</span><span class="se">\n</span><span class="s">liste: </span><span class="si">%d</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">ks</span><span class="p">,</span> <span class="n">ts</span><span class="p">,</span> <span class="n">os</span><span class="p">,</span> <span class="n">bs</span><span class="p">,</span> <span class="n">ls</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">#örnek kullanım:</span>
</span><span class='line'><span class="n">analiz</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="s">&#39;1.1&#39;</span><span class="p">,</span> <span class="p">[</span><span class="mf">1.1</span><span class="p">,</span> <span class="mf">1.1</span><span class="p">],</span> <span class="p">[</span><span class="bp">False</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="bp">True</span><span class="p">],</span> <span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
