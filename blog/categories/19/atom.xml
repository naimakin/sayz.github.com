<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 19 | Sayz'ın Usu]]></title>
  <link href="http://sayz.github.io/blog/categories/19/atom.xml" rel="self"/>
  <link href="http://sayz.github.io/"/>
  <updated>2013-05-04T01:48:03+03:00</updated>
  <id>http://sayz.github.io/</id>
  <author>
    <name><![CDATA[Sefa Yıldız]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[python modüllerinde __name__ Özelliğinin kullanımı]]></title>
    <link href="http://sayz.github.io/blog/2013/04/29/python-modullerinde-name-kullanimi/"/>
    <updated>2013-04-29T22:45:00+03:00</updated>
    <id>http://sayz.github.io/blog/2013/04/29/python-modullerinde-name-kullanimi</id>
    <content type="html"><![CDATA[<h4>Modüller yenilir mi, içilir mi?</h4>

<p>Öncelikle python'da modüllerden ufak bi' bahsedeyim. Bildiğiniz gibi <strong>bir betik içersinde</strong> kodlarımızı tekrar tekrar yazmamak için bir kez fonksiyon tanımlamamız yeterli. O fonksiyonu kullanarak kodları tekrar kullanabiliyoruz. Peki ya aynı fonksiyona başka bir Python programında da ihtiyacımız olursa ne yapacağız? Cevap tabii ki modül kullanmak.</p>

<p>Python'da modül yazmak için birçok metod var ama bunlardan en basit ve en yaygın olanı fonksiyonlar ve değişkenler için .py uzantılı dosyaları kullanmak. Yani <strong>evet</strong>, şimdiye kadar yazdığınız her python betiği aynı zamanda birer modül. Diğer bir modül oluşturma yöntemi de <a href="http://docs.python.org/3/extending/index.html">C veya C++ programlama dilleri ile yazmaktır</a>.</p>

<p>Yani sonuç olarak python'da modül dediğimiz şey aslında bizim yazdığımız betiklerdir. Yani yazdığımız her python betiği bir modül olarak başka bir betikte içe aktarılabilir(<code>import</code>).  Modüller için ayrıca <a href="http://docs.python.org/3/tutorial/modules.html">buraya</a> bakabilirsiniz.</p>

<h4>Bir modül'ün ismi</h4>

<p>Yavaş yavaş asıl değinmek istediğim konuya geleyim. Python'da her modülün bir ismi vardır. Python yorumlayıcısı bir modülü yorumlarken o modüldeki tüm kodları çalıştırmadan önce  bazı değişkenler tanımlar. Bunlardan birisi <code>__name__</code> değişkenidir. Bu değişken, o modül'ün çalıştırılma şekline göre başka değerler alır.</p>

<!-- more -->


<p>Eğer python yorumlayıcısı bizim yazdığımız modülü ana program olarak çalıştırıyorsa <code>__name__</code> değişkeni <code>'__main__'</code> değerini alır. Ancak yazmış olduğumuz modül başka bir modül içinden çağırılıyorsa bu sefer <code>__name__</code> değişkeni kendi modül'ünün adını alır.</p>

<p>Anlaşılması için bunları bir örnekle açıklayayım;</p>

<p>Örneğin <code>ornek_modul.py</code> isminde bir dosyaya kaydedeceğimiz şöyle bir betik yazalım:</p>

<p>``` python <strong>name</strong> özelliğinin kullanımı
if <strong>name</strong> == '<strong>main</strong>':</p>

<pre><code>print('Kendi dosyam tarafından çalıştırıldım.')
</code></pre>

<p>else:</p>

<pre><code>print('Başka bir modül tarafından içe aktarılarak çalıştırıldım.')
</code></pre>

<p>```
Şimdi bu betikle ilgili çıktılara bakalım:</p>

<p>```bash çıktı testleri
$ python3 ornek_modul.py
Kendi dosyam tarafından çalıştırıldım.
$ python3</p>

<blockquote><blockquote><blockquote><p>import ornek_modul
Başka bir modül tarafından içe aktarılarak çalıştırıldım.</p></blockquote></blockquote></blockquote>

<p>```</p>

<p>Görüldüğü gibi <code>ornek_modul.py</code> doyasını kendi başına çalıştırısak <code>__name__</code> değişkeni <code>'__main__'</code> değerini alıyor. Fakat python'un etkileşimli kabuğuna girip <code>ornek_modul</code> modülünü içeri aktarırsak 1. koddaki <code>else</code> bloğuna düşeriz çünkü <code>__name__</code> değişkeni bu defa modülün ismi olan <code>ornek_modul</code> değerini almış olur.</p>

<p>kaynaklar:</p>

<ul>
<li><a href="http://swaroopch.com/notes/python/">a byte of python</a></li>
<li><a href="http://stackoverflow.com/questions/419163/what-does-if-name-main-do">stackoverflow</a></li>
<li><a href="http://docs.python.org/">python docs</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[otomatik pep8'leyici: autopep8]]></title>
    <link href="http://sayz.github.io/blog/2013/04/07/otomatik-pep8-leyici-autopep8/"/>
    <updated>2013-04-07T21:45:00+03:00</updated>
    <id>http://sayz.github.io/blog/2013/04/07/otomatik-pep8-leyici-autopep8</id>
    <content type="html"><![CDATA[<p>herkese merhabalar;</p>

<p>autopep8 için bölüm'ün e-posta listesine attığım e-postayı buraya da geçeyim.$</p>

<p>bildiğiniz gibi python için bir kod yazım stili var: pep8 (bilmeyenler için<sup>(<a href="http://www.python.org/dev/peps/pep-0008/">1</a>)</sup>), neyse, işte python ile yeni kod yazmaya başlayan arkadaşlar genellikle bu kurallara, stile uymakta zorlanır veya erinirler bunları uygulamaya, ne bileyim işleçler arasında boşluk bırakmak falan zor gelir kimisine.</p>

<p>biliyorsunuz genelde tembel insanlarız bizler :-) o yüzden adamlar sırf bu bizim eringeçliğimizi bildikleri için erinmemişler :-) ve kalkıp bir otomatik "pep8"leyici (tabir bana ait) yazmışlar, adı autopep8.</p>

<h5>peki nedir bu autopep8, yenilir mi içilir mi?</h5>

<p>kısaca şudur:</p>

<p>sen karman çorman yazıyorsun kodu<sup>(<a href="http://goo.gl/BYUeu">2</a>)</sup> ve autopep8 sadece tek satırlık komutla kodunu pep8'e uygun hale<sup>(<a href="http://goo.gl/C5LqP">3</a>)</sup> getiriyor.</p>

<ul>
<li>önce autopep8'i kuralım sistemimize:</li>
</ul>


<p> ~$: <code>sudo easy_install -ZU autopep8</code></p>

<ul>
<li>kurulumdan sonra şöyle kullanabilirsiniz autopep8'i:</li>
</ul>


<p>  ~$: <code>autopep8 -ia bozuk_kod.py</code></p>

<p>  artık kodunuz pep8 standartlarına uygun hale gelmiş oldu.</p>

<p>  iki dosya arasındaki farkı görmek için <a href="https://gist.github.com/sayz/5331516/revisions">şuradaki</a> gist karşılaştırmasına bakabilirsiniz.</p>

<p>  autopep8'e sokmadan önce bozuk_kod.py doyasının pep8 çıktısı 144 satırdı.<sup>(<a href="http://goo.gl/1Gcmh">4</a>)</sup></p>

<p>  daha fazlası <a href="https://github.com/hhatto/autopep8">burada</a>.</p>

<p>  \HTH</p>

<p>  --
  sayz</p>
]]></content>
  </entry>
  
</feed>
